package wf.database;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.commons.dbcp2.BasicDataSource;
import org.apache.commons.dbcp2.managed.BasicManagedDataSource;
import org.hsqldb.Server;
import org.hsqldb.jdbc.JDBCPool;
import org.hsqldb.jdbc.pool.JDBCPooledDataSource;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.server.ServerAcl.AclFormatException;
import org.hsqldb.server.WebServer;

public class DataBaseUtility {

    private static BasicDataSource dataSource;


    public static String getRunTimePath() {
        String runtimePath = "";
        try {
            String jarPath = DataBaseUtility.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
            runtimePath = jarPath.substring(0, jarPath.lastIndexOf("/"));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return runtimePath;
    }

    public static void main(String[] args) throws SQLException {

    }

    public static void startServer() {
        try {
            System.out.println("Starting Database");
            HsqlProperties p = new HsqlProperties();
//            p.setProperty("server.database.0", "file:" + getRunTimePath() + "/lib/wf");
//            p.setProperty("server.dbname.0", "mydb");
//            p.setProperty("server.port", "9001");
            p.setProperty("database.0", "file:" + getRunTimePath() + "/lib/wf");
            p.setProperty("dbname.0", "xdb");
            Server server = new Server();
            System.out.println(server.getProtocol() + ".....");
            server.setProperties(p);
            server.setLogWriter(null); // can use custom writer
            server.setErrWriter(null); // can use custom writer
            server.start();
        } catch (AclFormatException afex) {
            afex.printStackTrace();
            LogUtil.log(afex.getMessage());
        } catch (IOException ioex) {
            ioex.printStackTrace();
             LogUtil.log(ioex.getMessage());
        }
    }

    public static org.hsqldb.server.Server sonicServer;

    public static void startDBServer() {
        HsqlProperties props = new HsqlProperties();
        props.setProperty("server.database.0", "file:" + getRunTimePath() + "/lib/wf");
        props.setProperty("server.dbname.0", "xdb");
        sonicServer = new Server();
        try {
            sonicServer.setProperties(props);
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
        sonicServer.start();
        createTable();
    }

    private static final String jdbc_class_hsql = "org.hsqldb.jdbc.JDBCDriver";
    private static final String jdbc_url_hsql = "jdbc:hsqldb:";

    public static Connection getConnection() throws Exception {
        Class.forName(jdbc_class_hsql);
        JDBCPooledDataSource datasource = new JDBCPooledDataSource();
        String serverIp = ParamsUtil.loadParams().get("ServerAddress");
        System.out.println("xxx:" + serverIp);
        datasource.setUrl("jdbc:hsqldb:hsql://" + serverIp + "/xdb");
        datasource.setUser("SA");
//        datasource.setPassword("hbue");
        datasource.setLoginTimeout(4);
        return datasource.getPooledConnection().getConnection();
    }

    public static void createTable() {
        String newSql = "CREATE TABLE IF NOT EXISTS  registration ("
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
                + "报名类型 VARCHAR(20),手机号 VARCHAR(50),"
                + "密码 VARCHAR(200),姓名 VARCHAR(200),"
                + "性别 VARCHAR(20),年龄 VARCHAR(20),邮箱 varchar(50) ,"
                + "证件号码 varchar(50),所在城市 varchar(20),"
                + "邮寄地址 varchar(50),工作单位 varchar(50),"
                + "职务 varchar(100),职称 varchar(50),发票抬头 varchar(100),"
                + "pinyin varchar(100),全拼或英文名 varchar(100),证件类型 varchar(50),"
                + "已领资料 boolean default false,是否付费 varchar(10),已打印胸牌 boolean,"
                + "会议报名 varchar(30),"
                + "是否需要学分 varchar(10),"
                + "注册费用 varchar(10),"
                + "学历 varchar(30),"
                + "导入ID varchar(50))\n";


        String sql = "CREATE TABLE IF NOT EXISTS  registration (\n"
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n"
                + "报名类型 VARCHAR(20),\n"
                + "手机号 VARCHAR(20),\n"
                + "密码 VARCHAR(200),\n"
                + "姓名 VARCHAR(20),\n"
                + "性别 VARCHAR(20),\n"
                + "年龄 VARCHAR(20),\n"
                + "电邮 varchar(50) ,\n"
                + "身份证 varchar(50),\n"
                + "所在城市 varchar(20),\n"
                + "所在单位 varchar(50),\n"
                + "单位地址 varchar(50),\n"
                + "职务 varchar(20),\n"
                + "职称 varchar(50),\n"
                + "发票抬头 varchar(100),\n"
                + "pinyin varchar(20)\n"
                + ")";
        try {
            Connection conn = getConnection();
            Statement stm = conn.createStatement();
            stm.execute(newSql);
            conn.commit();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
